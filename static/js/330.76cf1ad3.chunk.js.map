{"version":3,"file":"static/js/330.76cf1ad3.chunk.js","mappings":"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","sources":["components/ModalEditTask/ModalEditTask.jsx","components/Tasks/TasksPage.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import { db } from '../../firebase';\nimport { collection, doc, updateDoc } from 'firebase/firestore';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentUserUid } from 'redux/auth/authSelectors';\nimport { closeModal } from 'redux/global/slice';\nimport {\n  Box,\n  ModalBtn,\n  ModalForm,\n  ModalLabel,\n  TextArea,\n  Title,\n} from './ModalEditTask.styled';\nimport { requestAllTasks } from 'redux/auth/authOperation';\nimport { useTranslation } from 'react-i18next';\n\nconst ModalEditTask = ({ task }) => {\n  const [updateTitle, setUpdateTitle] = useState(task.title);\n  const [updateDescription, setUpdateDescription] = useState(task.description);\n  const currentUserUid = useSelector(selectCurrentUserUid);\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const handleSaveChanges = async event => {\n    event.preventDefault();\n\n    const updatedFields = {\n      title: updateTitle,\n      description: updateDescription,\n    };\n\n    const taskRef = doc(\n      collection(db, 'users', currentUserUid, 'tasks'),\n      task.id\n    );\n    await updateDoc(taskRef, updatedFields);\n\n    dispatch(requestAllTasks());\n\n    dispatch(closeModal());\n  };\n\n  return (\n    <Box>\n      <ModalForm onSubmit={handleSaveChanges}>\n        <Title>{t('editTask.mainTitle')}</Title>\n        <ModalLabel>\n        {t('editTask.title')}\n          <TextArea\n            type=\"text\"\n            name=\"updateTitle\"\n            value={updateTitle}\n            onChange={e => setUpdateTitle(e.target.value)}\n          />\n        </ModalLabel>\n        <ModalLabel>\n        {t('editTask.description')}\n          <TextArea\n            rows=\"8\"\n            type=\"text\"\n            name=\"updateDescription\"\n            value={updateDescription}\n            onChange={e => setUpdateDescription(e.target.value)}\n          />\n        </ModalLabel>\n        <ModalBtn type=\"submit\">{t('editTask.button')}</ModalBtn>\n      </ModalForm>\n    </Box>\n  );\n};\n\nexport default ModalEditTask;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectActiveTasks,\n  selectCurrentUserUid,\n} from 'redux/auth/authSelectors';\nimport { ImPencil2 } from 'react-icons/im';\nimport {\n  Container,\n  Wrapper,\n  WrapperTitle,\n  WrapperButton,\n  CheckBox,\n  Title,\n  TitleDesk,\n  IconClose,\n  CloseButton,\n  EditButton,\n  Section,\n  TitleMain,\n  TitleTask,\n} from './TasksPage.styled';\nimport { openModalEditTask } from 'redux/global/slice';\nimport { ModalContainer } from 'components/ModalContainer/ModalContainer';\nimport ModalEditTask from 'components/ModalEditTask/ModalEditTask';\nimport {\n  selectEditingTaskId,\n  selectIsModalEditTaskOpen,\n} from 'redux/global/selectors';\nimport {\n  deleteTasks,\n  requestAllTasks,\n  toggleComplete,\n} from 'redux/auth/authOperation';\nimport { useTranslation } from 'react-i18next';\n\nconst TasksPage = () => {\n  const dispatch = useDispatch();\n  const currentUserUid = useSelector(selectCurrentUserUid);\n  const editingTaskId = useSelector(selectEditingTaskId);\n  const isModalOpen = useSelector(selectIsModalEditTaskOpen);\n  const tasks = useSelector(selectActiveTasks);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (!currentUserUid) return;\n    dispatch(requestAllTasks());\n  }, [currentUserUid, dispatch]);\n\n  const deleteTask = async taskId => {\n    dispatch(deleteTasks(taskId));\n  };\n\n  const taskToEdit =\n    tasks?.length > 0 && tasks.find(task => task.id === editingTaskId);\n\n  return (\n    <main>\n      <Container>\n        <TitleMain>{t('manager.title')}</TitleMain>\n        <Section>\n          <TitleTask>{t('manager.yourActive')}</TitleTask>\n          {tasks?.length > 0 &&\n            tasks.map(task => {\n              return (\n                <>\n                  <Wrapper key={task.id}>\n                    <CheckBox>\n                      <input\n                        type=\"checkbox\"\n                        name=\"completed\"\n                        checked={task.completed}\n                        id={task.id}\n                        onChange={() => {\n                          console.log(\n                            'toggleComplete',\n                            task.id,\n                            task.completed\n                          );\n                          dispatch(\n                            toggleComplete({\n                              taskId: task.id,\n                              completed: !task.completed,\n                            })\n                          );\n                          dispatch(requestAllTasks());\n                        }}\n                      />\n                      <label htmlFor={task.id}></label>\n                    </CheckBox>\n                    <WrapperTitle>\n                      <Title>{task.title}</Title>\n                      <TitleDesk>{task.description}</TitleDesk>\n                    </WrapperTitle>\n                    <WrapperButton>\n                      <EditButton\n                        onClick={() => dispatch(openModalEditTask(task.id))}\n                      >\n                        <ImPencil2 />\n                      </EditButton>\n                      <CloseButton onClick={() => deleteTask(task.id)}>\n                        <IconClose />\n                      </CloseButton>\n                    </WrapperButton>\n                  </Wrapper>\n                </>\n              );\n            })}\n        </Section>\n        {isModalOpen && (\n          <ModalContainer>\n            <ModalEditTask\n              task={taskToEdit}\n              // requestAllTasks={requestAllTasks}\n            />\n          </ModalContainer>\n        )}\n      </Container>\n    </main>\n  );\n};\n\nexport default TasksPage;\n","import TasksPage from 'components/Tasks/TasksPage';\nimport { Default } from 'components/Media/Media';\nimport Aside from 'components/Aside/Aside';\nimport { Header } from 'components/Header/Header';\n\nconst HomePage = () => {\n  return (\n    <>\n      <Header />\n      <TasksPage />\n      <Default>\n        <Aside />\n      </Default>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["task","useState","title","updateTitle","setUpdateTitle","description","updateDescription","setUpdateDescription","currentUserUid","useSelector","selectCurrentUserUid","dispatch","useDispatch","t","useTranslation","handleSaveChanges","event","preventDefault","updatedFields","taskRef","doc","collection","db","id","updateDoc","requestAllTasks","closeModal","onSubmit","type","name","value","onChange","e","target","rows","editingTaskId","selectEditingTaskId","isModalOpen","selectIsModalEditTaskOpen","tasks","selectActiveTasks","useEffect","deleteTask","taskId","deleteTasks","taskToEdit","length","find","map","checked","completed","console","log","toggleComplete","htmlFor","onClick","openModalEditTask","ModalContainer","Header","Aside"],"sourceRoot":""}